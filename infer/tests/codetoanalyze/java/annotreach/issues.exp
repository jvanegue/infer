codetoanalyze/java/annotreach/AnnotationReachabilityDuplicatesExample.java, codetoanalyze.java.checkers.AnnotationReachabilityDuplicatesExample.perfCriticalBad2():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method perfCriticalBad2(), marked as source @PerformanceCritical,calls callsExpensiveTwice(),callsExpensiveTwice() defined here,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/AnnotationReachabilityDuplicatesExample.java, codetoanalyze.java.checkers.AnnotationReachabilityDuplicatesExample.perfCriticalBad1():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method perfCriticalBad1(), marked as source @PerformanceCritical,calls callsEitherExpensive(),callsEitherExpensive() defined here,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.source11Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source11Bad(), marked as source @UserDefinedSource1,calls sink1(),sink1() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.source12Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source12Bad(), marked as source @UserDefinedSource1,calls sink2(),sink2() defined here, marked as sink @UserDefinedSink2]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.source21Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source21Bad(), marked as source @UserDefinedSource2,calls sink1(),sink1() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.source22Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source22Bad(), marked as source @UserDefinedSource2,calls sink2(),sink2() defined here, marked as sink @UserDefinedSink2]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsTwoSinksBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsTwoSinksBad(), marked as source @UserDefinedSource1,calls sink1(),sink1() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsTwoSinksBad():void, 2, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsTwoSinksBad(), marked as source @UserDefinedSource1,calls sink2(),sink2() defined here, marked as sink @UserDefinedSink2]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsTwoSinksIndirectlyBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsTwoSinksIndirectlyBad(), marked as source @UserDefinedSource1,calls callsTwoSinks(),callsTwoSinks() defined here,calls sink1(),sink1() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsTwoSinksIndirectlyBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsTwoSinksIndirectlyBad(), marked as source @UserDefinedSource1,calls callsTwoSinks(),callsTwoSinks() defined here,calls sink2(),sink2() defined here, marked as sink @UserDefinedSink2]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsSourceBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsSourceBad(), marked as source @UserDefinedSource2,calls source22Bad(),source22Bad() defined here,calls sink2(),sink2() defined here, marked as sink @UserDefinedSink2]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceCallsSinkThatCallsSinkBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceCallsSinkThatCallsSinkBad(), marked as source @UserDefinedSource1,calls sinkCallsSink(),sinkCallsSink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceTransitiveCallBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceTransitiveCallBad(), marked as source @UserDefinedSource1,calls callsSink(),callsSink() defined here,calls sink1(),sink1() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceDefinedInConfigBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceDefinedInConfigBad(), marked as source @UserDefinedSource1,calls sinkDefinedInConfig(),sinkDefinedInConfig() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$Derived.sourceBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceBad(), marked as source @UserDefinedSource1,calls sink(),sink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$Derived.sourceDefinedInConfigBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceDefinedInConfigBad(), marked as source @UserDefinedSource1,calls sinkDefinedInConfig(),sinkDefinedInConfig() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceDefinedInConfig_1_WithRegexBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceDefinedInConfig_1_WithRegexBad(), marked as source @UserDefinedSource1,calls sinkDefinedInConfig_1_WithRegex(),sinkDefinedInConfig_1_WithRegex() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.sourceDefinedInConfig_2_WithRegexBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceDefinedInConfig_2_WithRegexBad(), marked as source @UserDefinedSource1,calls sinkDefinedInConfig_2_WithRegex(),sinkDefinedInConfig_2_WithRegex() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$SourceClass.source1Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source1Bad(), marked as source @UserDefinedSource1,calls interfaceSink(),interfaceSink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$SourceClass.source2Bad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source2Bad(), marked as source @UserDefinedSource1,calls sinkBecauseOfTheInterface(),sinkBecauseOfTheInterface() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.accessesDeprecatedFieldBad():int, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method accessesDeprecatedFieldBad(), marked as source @AnySource,accesses deprecatedField]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations.callsDeprecatedMethodBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsDeprecatedMethodBad(), marked as source @AnySource,calls deprecatedMethod(),deprecatedMethod() defined here, marked as sink @Deprecated]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$GenericDerived.source(java.lang.Object):void, 8, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method source(...), marked as source @UserDefinedSource1,calls source(...),source(...) defined here,calls sink(),sink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.CustomAnnotations$DerivedWithSourceConstructor.<init>(codetoanalyze.java.checkers.CustomAnnotations), 0, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Constructor CustomAnnotations$DerivedWithSourceConstructor(...), marked as source @UserDefinedSource1,calls CustomAnnotations$BaseConstructorCallsSink(...),CustomAnnotations$BaseConstructorCallsSink(...) defined here,calls sink(),sink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/CustomAnnotations.java, codetoanalyze.java.checkers.RecursionSlightlyRenamed.sourceBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method sourceBad(), marked as source @UserDefinedSource1,calls f(),f() defined here,calls g(),g() defined here,calls sink(),sink() defined here, marked as sink @UserDefinedSink1]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalClass.performanceCriticalMethod1(codetoanalyze.java.checkers.ExpensiveClass):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method performanceCriticalMethod1(...), marked as source @PerformanceCritical,calls anExpensiveMethod(),anExpensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalClass.performanceCriticalMethod2(codetoanalyze.java.checkers.Other):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method performanceCriticalMethod2(...), marked as source @PerformanceCritical,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalClass.performanceCriticalMethod3(codetoanalyze.java.checkers.Other):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method performanceCriticalMethod3(...), marked as source @PerformanceCritical,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalSubclass.subclassPerformanceCriticalMethod1(codetoanalyze.java.checkers.ExpensiveClass):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method subclassPerformanceCriticalMethod1(...), marked as source @PerformanceCritical,calls anExpensiveMethod(),anExpensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalSubclass.subclassPerformanceCriticalMethod2(codetoanalyze.java.checkers.ExpensiveSubclass):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method subclassPerformanceCriticalMethod2(...), marked as source @PerformanceCritical,calls anotherExpensiveMethod(),anotherExpensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.PerformanceCriticalSubclass.subclassPerformanceCriticalMethod3(codetoanalyze.java.checkers.Other):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method subclassPerformanceCriticalMethod3(...), marked as source @PerformanceCritical,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.directlyCallingExpensiveMethod():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method directlyCallingExpensiveMethod(), marked as source @PerformanceCritical,calls expensiveMethod(),expensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.indirectlyCallingExpensiveMethod():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method indirectlyCallingExpensiveMethod(), marked as source @PerformanceCritical,calls methodWrapper(),methodWrapper() defined here,calls expensiveMethod(),expensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.callingExpensiveMethodFromInterface(codetoanalyze.java.checkers.ExpensiveInterfaceExample):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method callingExpensiveMethodFromInterface(...), marked as source @PerformanceCritical,calls m5(),m5() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.longerCallStackToExpensive():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method longerCallStackToExpensive(), marked as source @PerformanceCritical,calls callsExpensive2(),callsExpensive2() defined here,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.callsFindViewByIdFromView(android.widget.ImageView,int):android.view.View, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method callsFindViewByIdFromView(...), marked as source @PerformanceCritical,calls findViewById(...)]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.callsFindViewByIdFromActivity(android.support.v4.app.FragmentActivity,int):android.view.View, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method callsFindViewByIdFromActivity(...), marked as source @PerformanceCritical,calls findViewById(...)]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.callMethodOnExpensiveClass(codetoanalyze.java.checkers.ExpensiveClass):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method callMethodOnExpensiveClass(...), marked as source @PerformanceCritical,calls anExpensiveMethod(),anExpensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.annotatedPerformanceCriticalInInterface():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method annotatedPerformanceCriticalInInterface(), marked as source @PerformanceCritical,calls callsExpensive1(),callsExpensive1() defined here,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveCallExample.java, codetoanalyze.java.checkers.ExpensiveCallExample.callsExpensiveInConditionalBranch():void, 2, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method callsExpensiveInConditionalBranch(), marked as source @PerformanceCritical,calls expensiveMethod(),expensiveMethod() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveInheritanceExample.java, codetoanalyze.java.checkers.ExpensiveInheritanceExample.reportsBecauseFooIsExpensiveInA(codetoanalyze.java.checkers.A):void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method reportsBecauseFooIsExpensiveInA(...), marked as source @PerformanceCritical,calls foo(),foo() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveInheritanceExample.java, codetoanalyze.java.checkers.ExpensiveInheritanceExample.reportsAssumingObjectOfTypeA():void, 2, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method reportsAssumingObjectOfTypeA(), marked as source @PerformanceCritical,calls foo(),foo() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveInheritanceExample.java, codetoanalyze.java.checkers.ExpensiveInheritanceExample.doesReportBecauseTypeFlowInsensitive(codetoanalyze.java.checkers.A):void, 2, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method doesReportBecauseTypeFlowInsensitive(...), marked as source @PerformanceCritical,calls foo(),foo() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveInterfaceExample.java, codetoanalyze.java.checkers.ExpensiveInterfaceExample$ImplementsInterface.m1():void, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method m1(), marked as source @PerformanceCritical,calls expensive(),expensive() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/ExpensiveSubtypingExample.java, codetoanalyze.java.checkers.ExpensiveSubtypingExample.m3():void, 0, CHECKERS_EXPENSIVE_OVERRIDES_UNANNOTATED, no_bucket, ERROR, []
codetoanalyze/java/annotreach/NoAllocationExample.java, codetoanalyze.java.checkers.NoAllocationExample.directlyAllocatingMethod():void, 1, CHECKERS_ALLOCATES_MEMORY, no_bucket, ERROR, [Method directlyAllocatingMethod(), marked as source @NoAllocation,calls Object()]
codetoanalyze/java/annotreach/NoAllocationExample.java, codetoanalyze.java.checkers.NoAllocationExample.indirectlyAllocatingMethod():void, 1, CHECKERS_ALLOCATES_MEMORY, no_bucket, ERROR, [Method indirectlyAllocatingMethod(), marked as source @NoAllocation,calls allocates(),allocates() defined here,calls Object()]
codetoanalyze/java/annotreach/TwoCheckersExample.java, codetoanalyze.java.checkers.TwoCheckersExample.shouldRaisePerformanceCriticalError():java.util.List, 1, CHECKERS_CALLS_EXPENSIVE_METHOD, no_bucket, ERROR, [Method shouldRaisePerformanceCriticalError(), marked as source @PerformanceCritical,calls shouldRaiseImmutableCastError(),shouldRaiseImmutableCastError() defined here, marked as sink @Expensive]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromUiThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromUiThreadBad(), marked as source @UiThread,calls callNonUiThreadMethod(),callNonUiThreadMethod() defined here,calls workerThread(),workerThread() defined here, marked as sink @WorkerThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromMainThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromMainThreadBad(), marked as source @MainThread,calls callNonUiThreadMethod(),callNonUiThreadMethod() defined here,calls workerThread(),workerThread() defined here, marked as sink @WorkerThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromWorkerThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromWorkerThreadBad(), marked as source @WorkerThread,calls callUiThreadMethod(),callUiThreadMethod() defined here,calls mainThread(),mainThread() defined here, marked as sink @MainThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromWorkerThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromWorkerThreadBad(), marked as source @WorkerThread,calls callUiThreadMethod(),callUiThreadMethod() defined here,calls uiThread(),uiThread() defined here, marked as sink @UiThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromAnyThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromAnyThreadBad(), marked as source @AnyThread,calls callUiThreadMethod(),callUiThreadMethod() defined here,calls mainThread(),mainThread() defined here, marked as sink @MainThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromAnyThreadBad():void, 1, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromAnyThreadBad(), marked as source @AnyThread,calls callUiThreadMethod(),callUiThreadMethod() defined here,calls uiThread(),uiThread() defined here, marked as sink @UiThread]
codetoanalyze/java/annotreach/UiThreads.java, codetoanalyze.java.checkers.UiThreads.callsFromAnyThreadBad():void, 2, CHECKERS_ANNOTATION_REACHABILITY_ERROR, no_bucket, ERROR, [Method callsFromAnyThreadBad(), marked as source @AnyThread,calls callNonUiThreadMethod(),callNonUiThreadMethod() defined here,calls workerThread(),workerThread() defined here, marked as sink @WorkerThread]
