[
    {
        "bug_type": "PULSE_UNNECESSARY_COPY",
        "qualifier": "copied variable `name` is not modified after it is copied from `options.operator[]().environmentVariableName()` on line 509.",
        "suggestion": "To avoid the copy, use reference `&`. If this copy was intentional, call `folly::copy` to make it explicit and hence suppress the warning.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 509,
        "column": 31,
        "procedure": "anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_balcl_balcl_commandline.cpp::u::validate",
        "procedure_start_line": 373,
        "file": "groups/bal/balcl/balcl_commandline.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balcl/balcl_commandline.cpp",
                "line_number": 509,
                "column_number": 31,
                "description": "copied here (with type `bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const &`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balcl_commandline.cpp|anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_balcl_balcl_commandline.cpp::u::validate|PULSE_UNNECESSARY_COPY",
        "node_key": "a3aee70cdd866ec20ce3b01b9f7929e4",
        "hash": "74f939241aec99823c41f3626edf7bc3",
        "bug_type_hum": "Unnecessary Copy",
        "extras": {
            "copy_type": "bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const &"
        }
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`this.d_callSequence.d_length` is read without initialization during the call to `BloombergLP::baljsn::SimpleFormatter::SimpleFormatter()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 561,
        "column": 21,
        "procedure": "BloombergLP::baljsn::DatumUtil::encode",
        "procedure_start_line": 548,
        "file": "groups/bal/baljsn/baljsn_datumutil.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/baljsn/baljsn_datumutil.cpp",
                "line_number": 561,
                "column_number": 5,
                "description": "struct field address `d_callSequence.d_length` created"
            },
            {
                "level": 0,
                "filename": "groups/bal/baljsn/baljsn_datumutil.cpp",
                "line_number": 561,
                "column_number": 21,
                "description": "when calling `BloombergLP::baljsn::SimpleFormatter::SimpleFormatter` here"
            },
            {
                "level": 1,
                "filename": "groups/bal/baljsn/baljsn_simpleformatter.cpp",
                "line_number": 33,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::baljsn::SimpleFormatter::SimpleFormatter"
            },
            {
                "level": 1,
                "filename": "groups/bal/baljsn/baljsn_simpleformatter.cpp",
                "line_number": 47,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlc::BitArray::append` here"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.h",
                "line_number": 1287,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlc::BitArray::append"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.h",
                "line_number": 1290,
                "column_number": 9,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 6,
        "bug_trace_max_depth": 2,
        "key": "baljsn_datumutil.cpp|encode|PULSE_UNINITIALIZED_VALUE",
        "node_key": "1871a65e52bbe45c4f69604afb7b6bcc",
        "hash": "a6a35a451c532bada9ed7879842244d6",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `&it` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 41,
        "column": 23,
        "procedure": "BloombergLP::ball::BroadcastObserver::deregisterObserver",
        "procedure_start_line": 29,
        "file": "groups/bal/ball/ball_broadcastobserver.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_broadcastobserver.cpp",
                "line_number": 41,
                "column_number": 23,
                "description": "copied here (with type `BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,bsl::shared_ptr<BloombergLP::ball::Observer>>,long>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_broadcastobserver.cpp|deregisterObserver|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "a49dadab7459b05f941ee7c024f6101d",
        "hash": "c4fdbfb348c515533039c72caa8ee58a",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,bsl::shared_ptr<BloombergLP::ball::Observer>>,long>&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_ASSIGNMENT",
        "qualifier": "`&nullCallback` is copy assigned into field `d_defaultThresholds` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1591,
        "column": 9,
        "procedure": "BloombergLP::ball::LoggerManager::setDefaultThresholdLevelsCallback",
        "procedure_start_line": 1581,
        "file": "groups/bal/ball/ball_loggermanager.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_loggermanager.cpp",
                "line_number": 1591,
                "column_number": 9,
                "description": "copy assigned here (with type `bsl::function<_fn_>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_loggermanager.cpp|setDefaultThresholdLevelsCallback|PULSE_UNNECESSARY_COPY_ASSIGNMENT",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "9caacdddb10ca6f1cd1e788c7891969f",
        "bug_type_hum": "Unnecessary Copy Assignment",
        "extras": {
            "copy_type": "bsl::function<_fn_>&"
        },
        "autofix": {
            "original": "d_defaultThresholds = nullCallback;",
            "replacement": "d_defaultThresholds = std::move(nullCallback);"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 957,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::TimestampFormatter::deleteSelf",
        "procedure_start_line": 957,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 957,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "2a0df9ea952219cdf7ebfec16a49a849",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1070,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::ThreadIdFormatter::deleteSelf",
        "procedure_start_line": 1070,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1070,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "84880331276d1b7dfc97745029d96080",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1163,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::ProcessIdFormatter::deleteSelf",
        "procedure_start_line": 1163,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1163,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "18e61d46cee2ee578f7d42a054547219",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1179,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::LineFormatter::deleteSelf",
        "procedure_start_line": 1179,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1179,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "2bfad54d2a67f0f8f17fdeb751cfc2a2",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1195,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::CategoryFormatter::deleteSelf",
        "procedure_start_line": 1195,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1195,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "532133054632ece5f6e79d7e53b8b2c0",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1210,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::SeverityFormatter::deleteSelf",
        "procedure_start_line": 1210,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1210,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "4e851170078d79c9d040d341cdd35cba",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1229,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::MessageFormatter::deleteSelf",
        "procedure_start_line": 1229,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1229,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "a6e53807d4ee41f76a41e12e946c5178",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1245,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::FileFormatter::deleteSelf",
        "procedure_start_line": 1245,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1245,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "5f82d13e20f428fdb0bd15630fa1fba0",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1305,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::AttributeFormatter::deleteSelf",
        "procedure_start_line": 1305,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1305,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "6432f46882637b119be033084969b4eb",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1376,
        "column": 1,
        "procedure": "BloombergLP::ball::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_ball_ball_recordjsonformatter.cpp::AttributesFormatter::deleteSelf",
        "procedure_start_line": 1376,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1376,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<int> const `"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "ball_recordjsonformatter.cpp|deleteSelf|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "ce25538fbaf781c753f0bea58d16f4fd",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int> const "
        }
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`this.d_callSequence.d_length` is read without initialization during the call to `BloombergLP::baljsn::SimpleFormatter::SimpleFormatter()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1657,
        "column": 29,
        "procedure": "BloombergLP::ball::RecordJsonFormatter::operator()",
        "procedure_start_line": 1654,
        "file": "groups/bal/ball/ball_recordjsonformatter.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1657,
                "column_number": 5,
                "description": "struct field address `d_callSequence.d_length` created"
            },
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_recordjsonformatter.cpp",
                "line_number": 1657,
                "column_number": 29,
                "description": "when calling `BloombergLP::baljsn::SimpleFormatter::SimpleFormatter` here"
            },
            {
                "level": 1,
                "filename": "groups/bal/baljsn/baljsn_simpleformatter.cpp",
                "line_number": 18,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::baljsn::SimpleFormatter::SimpleFormatter"
            },
            {
                "level": 1,
                "filename": "groups/bal/baljsn/baljsn_simpleformatter.cpp",
                "line_number": 30,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlc::BitArray::append` here"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.h",
                "line_number": 1287,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlc::BitArray::append"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.h",
                "line_number": 1290,
                "column_number": 9,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 6,
        "bug_trace_max_depth": 2,
        "key": "ball_recordjsonformatter.cpp|operator()|PULSE_UNINITIALIZED_VALUE",
        "node_key": "8f04eeb938d253aaa5cfc2961a8395b3",
        "hash": "03519407ec2a9dc266c0425fea5bbcb9",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 137, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 137,
        "column": 5,
        "procedure": "BloombergLP::baltzo::DefaultZoneinfoCache::defaultZoneinfoDataLocation",
        "procedure_start_line": 119,
        "file": "groups/bal/baltzo/baltzo_defaultzoneinfocache.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/baltzo/baltzo_defaultzoneinfocache.cpp",
                "line_number": 137,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "baltzo_defaultzoneinfocache.cpp|defaultZoneinfoDataLocation|INFINITE_LOOP",
        "node_key": "b0505af42fefa95ad84b38b49268fe07",
        "hash": "e5453aada07e0ef66075ab50925b6182",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `parseElementCallback` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 259,
        "column": 1,
        "procedure": "BloombergLP::balxml::ListParser<bsl::vector<char,bsl::allocator<char>>>::ListParser",
        "procedure_start_line": 259,
        "file": "groups/bal/balxml/balxml_listparser.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balxml/balxml_listparser.h",
                "line_number": 259,
                "column_number": 1,
                "description": "Parameter parseElementCallback with type `bsl::function<_fn_>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balxml_listparser.h|ListParser|PULSE_CONST_REFABLE",
        "node_key": "5bb34b30fda4606f9e6ca00a7855f241",
        "hash": "574e26b738791300c789332b0dcf2aeb",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::function<_fn_>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_ASSIGNMENT",
        "qualifier": "`resolver` is copy assigned into field `d_resolver` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 523,
        "column": 5,
        "procedure": "BloombergLP::balxml::MiniReader::setResolver",
        "procedure_start_line": 521,
        "file": "groups/bal/balxml/balxml_minireader.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balxml/balxml_minireader.cpp",
                "line_number": 523,
                "column_number": 5,
                "description": "copy assigned here (with type `bsl::function<_fn_>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balxml_minireader.cpp|setResolver|PULSE_UNNECESSARY_COPY_ASSIGNMENT",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "288365c34db5e81912a796c2668d3ca7",
        "bug_type_hum": "Unnecessary Copy Assignment",
        "extras": {
            "copy_type": "bsl::function<_fn_>&"
        }
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 1937, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 1937,
        "column": 5,
        "procedure": "BloombergLP::balxml::TypesPrintUtil_Imp::printList<bsl::vector<char>_>",
        "procedure_start_line": 1921,
        "file": "groups/bal/balxml/balxml_typesprintutil.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balxml/balxml_typesprintutil.h",
                "line_number": 1937,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balxml_typesprintutil.h|printList<bsl::vector<char>_>|INFINITE_LOOP",
        "node_key": "fa0c051eb65fbf8d37c52865108bb194",
        "hash": "0e62fe5759befd9202917011be721bd0",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `resolver` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 164,
        "column": 1,
        "procedure": "BloombergLP::balxml::Utf8ReaderWrapper::setResolver",
        "procedure_start_line": 164,
        "file": "groups/bal/balxml/balxml_utf8readerwrapper.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balxml/balxml_utf8readerwrapper.cpp",
                "line_number": 164,
                "column_number": 1,
                "description": "Parameter resolver with type `bsl::function<_fn_>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balxml_utf8readerwrapper.cpp|setResolver|PULSE_CONST_REFABLE",
        "node_key": "ecf3bd313f176f2fcd1b251c3288f49e",
        "hash": "8a63dfdb4e526401020a59c578120522",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::function<_fn_>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `resolver` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 166,
        "column": 31,
        "procedure": "BloombergLP::balxml::Utf8ReaderWrapper::setResolver",
        "procedure_start_line": 164,
        "file": "groups/bal/balxml/balxml_utf8readerwrapper.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/balxml/balxml_utf8readerwrapper.cpp",
                "line_number": 166,
                "column_number": 31,
                "description": "copied here (with type `bsl::function<_fn_>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "balxml_utf8readerwrapper.cpp|setResolver|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "ecf3bd313f176f2fcd1b251c3288f49e",
        "hash": "d8e527a926af8abafe2ee1b5fa648b82",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::function<_fn_>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `dst` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2285,
        "column": 1,
        "procedure": "BloombergLP::bdlc::PackedIntArray<int>::insert",
        "procedure_start_line": 2285,
        "file": "groups/bdl/bdlc/bdlc_packedintarray.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlc/bdlc_packedintarray.h",
                "line_number": 2285,
                "column_number": 1,
                "description": "Parameter dst with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlc_packedintarray.h|insert|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "5959e7e54cd3624a34b4710dacf9789c",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `dstFirst` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2358,
        "column": 1,
        "procedure": "BloombergLP::bdlc::PackedIntArray<int>::remove",
        "procedure_start_line": 2358,
        "file": "groups/bdl/bdlc/bdlc_packedintarray.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlc/bdlc_packedintarray.h",
                "line_number": 2358,
                "column_number": 1,
                "description": "Parameter dstFirst with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlc_packedintarray.h|remove|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "344f796165d5da370c8df37d97fa3d11",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `dstLast` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2358,
        "column": 1,
        "procedure": "BloombergLP::bdlc::PackedIntArray<int>::remove",
        "procedure_start_line": 2358,
        "file": "groups/bdl/bdlc/bdlc_packedintarray.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlc/bdlc_packedintarray.h",
                "line_number": 2358,
                "column_number": 1,
                "description": "Parameter dstLast with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlc_packedintarray.h|remove|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "4f1e9317f4da636ac01a348f143d359b",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `last` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 146,
        "column": 1,
        "procedure": "BloombergLP::bdlc::PackedIntArrayUtil::lowerBound<int>",
        "procedure_start_line": 146,
        "file": "groups/bdl/bdlc/bdlc_packedintarrayutil.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlc/bdlc_packedintarrayutil.h",
                "line_number": 146,
                "column_number": 1,
                "description": "Parameter last with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlc_packedintarrayutil.h|lowerBound<int>|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "d0e66932cc785666fc0cf6c791704284",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `last` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 176,
        "column": 1,
        "procedure": "BloombergLP::bdlc::PackedIntArrayUtil::upperBound<int>",
        "procedure_start_line": 176,
        "file": "groups/bdl/bdlc/bdlc_packedintarrayutil.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlc/bdlc_packedintarrayutil.h",
                "line_number": 176,
                "column_number": 1,
                "description": "Parameter last with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlc_packedintarrayutil.h|upperBound<int>|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "fc51dcac4d614e5b624471b7f9a3099f",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>"
        }
    },
    {
        "bug_type": "STACK_VARIABLE_ADDRESS_ESCAPE",
        "qualifier": "Address of stack variable `node` is returned by the function.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1931,
        "column": 5,
        "procedure": "BloombergLP::bdlcc::SkipList::PairFactory::operator()",
        "procedure_start_line": 1926,
        "file": "groups/bdl/bdlcc/bdlcc_skiplist.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlcc/bdlcc_skiplist.h",
                "line_number": 1926,
                "column_number": 1,
                "description": "parameter `node` of BloombergLP::bdlcc::SkipList::PairFactory::operator()"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlcc/bdlcc_skiplist.h",
                "line_number": 1931,
                "column_number": 5,
                "description": "returned here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bdlcc_skiplist.h|operator()|STACK_VARIABLE_ADDRESS_ESCAPE",
        "node_key": "bffdbc4d6fbdfc9cd869008e74879d86",
        "hash": "3c99f5b66a98498bda1e34cf37f522cf",
        "bug_type_hum": "Stack Variable Address Escape",
        "extras": {}
    },
    {
        "bug_type": "NULLPTR_DEREFERENCE",
        "qualifier": "null (null value originating from line 1994) is dereferenced.",
        "severity": "ERROR",
        "category": "Null pointer dereference",
        "line": 1994,
        "column": 5,
        "procedure": "BloombergLP::bdlcc::SkipList<long long,BloombergLP::bdlmt::EventScheduler::EventData>::offsetOfPtrs",
        "procedure_start_line": 1983,
        "file": "groups/bdl/bdlcc/bdlcc_skiplist.h",
        "bug_trace": [
            {
                "level": 1,
                "filename": "groups/bdl/bdlcc/bdlcc_skiplist.h",
                "line_number": 1994,
                "column_number": 5,
                "description": "is assigned to the null pointer"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlcc/bdlcc_skiplist.h",
                "line_number": 1994,
                "column_number": 5,
                "description": "invalid access occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 1,
        "key": "bdlcc_skiplist.h|offsetOfPtrs|NULLPTR_DEREFERENCE",
        "node_key": "bffdbc4d6fbdfc9cd869008e74879d86",
        "hash": "49e2d72ee38def8b9810ea4df8f07b90",
        "bug_type_hum": "Null Dereference",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `key` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1389,
        "column": 1,
        "procedure": "BloombergLP::bdlcc::TimeQueue<bsl::function<_fn_>>::getNodeFromHandle",
        "procedure_start_line": 1389,
        "file": "groups/bdl/bdlcc/bdlcc_timequeue.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlcc/bdlcc_timequeue.h",
                "line_number": 1389,
                "column_number": 1,
                "description": "Parameter key with type `BloombergLP::bdlcc::TimeQueue<bsl::function<void_(void)>_>::Key`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlcc_timequeue.h|getNodeFromHandle|PULSE_CONST_REFABLE",
        "node_key": "b0505af42fefa95ad84b38b49268fe07",
        "hash": "fcd04fa52f1f5f88c7bf038cb1599c94",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlcc::TimeQueue<bsl::function<void_(void)>_>::Key"
        }
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`__param_0.d_capacity` is read without initialization during the call to `BloombergLP::bdld::DatumMutableArrayRef::operator=()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 140,
        "column": 5,
        "procedure": "BloombergLP::bdld::DatumArrayBuilder::commit",
        "procedure_start_line": 137,
        "file": "groups/bdl/bdld/bdld_datumarraybuilder.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_datumarraybuilder.cpp",
                "line_number": 140,
                "column_number": 20,
                "description": "struct field address `d_capacity` created"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_datumarraybuilder.cpp",
                "line_number": 140,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdld::DatumMutableArrayRef::operator=` here"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdld/bdld_datum.h",
                "line_number": 2033,
                "column_number": 7,
                "description": "parameter `__param_0` of BloombergLP::bdld::DatumMutableArrayRef::operator="
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdld/bdld_datum.h",
                "line_number": 2033,
                "column_number": 7,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdld_datumarraybuilder.cpp|commit|PULSE_UNINITIALIZED_VALUE",
        "node_key": "c17e35fa0089c0d328245052ccb34130",
        "hash": "12d320f21eb8ddde62d7479e7e6083f6",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`__param_0.d_allocatedSize` is read without initialization during the call to `BloombergLP::bdld::DatumMutableMapOwningKeysRef::operator=()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 257,
        "column": 5,
        "procedure": "BloombergLP::bdld::DatumMapOwningKeysBuilder::commit",
        "procedure_start_line": 245,
        "file": "groups/bdl/bdld/bdld_datummapowningkeysbuilder.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_datummapowningkeysbuilder.cpp",
                "line_number": 257,
                "column_number": 22,
                "description": "struct field address `d_allocatedSize` created"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_datummapowningkeysbuilder.cpp",
                "line_number": 257,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdld::DatumMutableMapOwningKeysRef::operator=` here"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdld/bdld_datum.h",
                "line_number": 2266,
                "column_number": 7,
                "description": "parameter `__param_0` of BloombergLP::bdld::DatumMutableMapOwningKeysRef::operator="
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdld/bdld_datum.h",
                "line_number": 2266,
                "column_number": 7,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdld_datummapowningkeysbuilder.cpp|commit|PULSE_UNINITIALIZED_VALUE",
        "node_key": "c17e35fa0089c0d328245052ccb34130",
        "hash": "84921b369067149cd15527074109a8db",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY",
        "qualifier": "copied variable `tempA` is not modified after it is copied from `a` on line 539.",
        "suggestion": "To avoid the copy, use reference `&`. If this copy was intentional, call `folly::copy` to make it explicit and hence suppress the warning.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 539,
        "column": 22,
        "procedure": "BloombergLP::bdld::swap",
        "procedure_start_line": 532,
        "file": "groups/bdl/bdld/bdld_manageddatum.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_manageddatum.h",
                "line_number": 539,
                "column_number": 22,
                "description": "copied here (with type `BloombergLP::bdld::ManagedDatum&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdld_manageddatum.h|BloombergLP::bdld::swap|PULSE_UNNECESSARY_COPY",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "deeaa5b814df7ec53e80454104e9e765",
        "bug_type_hum": "Unnecessary Copy",
        "extras": {
            "copy_type": "BloombergLP::bdld::ManagedDatum&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY",
        "qualifier": "copied variable `tempB` is not modified after it is copied from `b` on line 540.",
        "suggestion": "To avoid the copy, use reference `&`. If this copy was intentional, call `folly::copy` to make it explicit and hence suppress the warning.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 540,
        "column": 22,
        "procedure": "BloombergLP::bdld::swap",
        "procedure_start_line": 532,
        "file": "groups/bdl/bdld/bdld_manageddatum.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdld/bdld_manageddatum.h",
                "line_number": 540,
                "column_number": 22,
                "description": "copied here (with type `BloombergLP::bdld::ManagedDatum&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdld_manageddatum.h|BloombergLP::bdld::swap|PULSE_UNNECESSARY_COPY",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "8acb634a890a5ecb80bc157827a3e770",
        "bug_type_hum": "Unnecessary Copy",
        "extras": {
            "copy_type": "BloombergLP::bdld::ManagedDatum&"
        }
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid32_to_binary64()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 266,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToDouble",
        "procedure_start_line": 261,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 261,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 266,
                "column_number": 12,
                "description": "when calling `__bid32_to_binary64` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144358,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid32_to_binary64"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144431,
                "column_number": 5,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToDouble|PULSE_UNINITIALIZED_VALUE",
        "node_key": "4f6aba8272ee2dfee18d1163129ff0fb",
        "hash": "7152b7df302d4e95bdec86fea6b2dfd1",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid64_to_binary64()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 274,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToDouble",
        "procedure_start_line": 269,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 269,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 274,
                "column_number": 12,
                "description": "when calling `__bid64_to_binary64` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144451,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid64_to_binary64"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144568,
                "column_number": 5,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToDouble|PULSE_UNINITIALIZED_VALUE",
        "node_key": "4f6aba8272ee2dfee18d1163129ff0fb",
        "hash": "ec878b81e0f61a58e489f06bc1f466b2",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid128_to_binary64()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 282,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToDouble",
        "procedure_start_line": 277,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 277,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 282,
                "column_number": 12,
                "description": "when calling `__bid128_to_binary64` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144590,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid128_to_binary64"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144603,
                "column_number": 3,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToDouble|PULSE_UNINITIALIZED_VALUE",
        "node_key": "c18bbfe41163caf7751838c1e1fd6323",
        "hash": "6e777fb742f80c67d41bcf00d7e0fa41",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid32_to_binary32()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 311,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToFloat",
        "procedure_start_line": 306,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 306,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 311,
                "column_number": 12,
                "description": "when calling `__bid32_to_binary32` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 143951,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid32_to_binary32"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144066,
                "column_number": 5,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToFloat|PULSE_UNINITIALIZED_VALUE",
        "node_key": "4f6aba8272ee2dfee18d1163129ff0fb",
        "hash": "41c476d62d32dee4b37bc25a581a6750",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid64_to_binary32()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 319,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToFloat",
        "procedure_start_line": 314,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 314,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 319,
                "column_number": 12,
                "description": "when calling `__bid64_to_binary32` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144085,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid64_to_binary32"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144204,
                "column_number": 5,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToFloat|PULSE_UNINITIALIZED_VALUE",
        "node_key": "4f6aba8272ee2dfee18d1163129ff0fb",
        "hash": "d4cb5df1448b4c628b995c9f067d6d41",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`flags` is read without initialization during the call to `__bid128_to_binary32()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 327,
        "column": 12,
        "procedure": "BloombergLP::bdldfp::DecimalConvertUtil_IntelDfp::decimalToFloat",
        "procedure_start_line": 322,
        "file": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 322,
                "column_number": 1,
                "description": "variable `flags` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdldfp/bdldfp_decimalconvertutil_inteldfp.h",
                "line_number": 327,
                "column_number": 12,
                "description": "when calling `__bid128_to_binary32` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144223,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid128_to_binary32"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_binarydecimal.c",
                "line_number": 144242,
                "column_number": 3,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_internal.h",
                "line_number": 810,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bdldfp_decimalconvertutil_inteldfp.h|decimalToFloat|PULSE_UNINITIALIZED_VALUE",
        "node_key": "c18bbfe41163caf7751838c1e1fd6323",
        "hash": "beb3057d292fc12f0d1ea353a6b1f640",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `func` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1753,
        "column": 5,
        "procedure": "BloombergLP::bdlf::BindUtil::bind<9df71018b1ed2dc3>",
        "procedure_start_line": 1753,
        "file": "groups/bdl/bdlf/bdlf_bind.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlf/bdlf_bind.h",
                "line_number": 1753,
                "column_number": 5,
                "description": "Parameter func with type `bsl::function<_fn_>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlf_bind.h|bind<9df71018b1ed2dc3>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "12371053847255feadc3fbf9a44e57f8",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::function<_fn_>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `func` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1790,
        "column": 5,
        "procedure": "BloombergLP::bdlf::BindUtil::bind<2e7fd2112bbf868a>",
        "procedure_start_line": 1790,
        "file": "groups/bdl/bdlf/bdlf_bind.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlf/bdlf_bind.h",
                "line_number": 1790,
                "column_number": 5,
                "description": "Parameter func with type `bsl::function<_fn_>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlf_bind.h|bind<2e7fd2112bbf868a>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "67fa17dc46c2cc43d5d4614cfd6e8554",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::function<_fn_>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `&it` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2161,
        "column": 21,
        "procedure": "BloombergLP::bdljsn::JsonObject::erase",
        "procedure_start_line": 2154,
        "file": "groups/bdl/bdljsn/bdljsn_json.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdljsn/bdljsn_json.h",
                "line_number": 2161,
                "column_number": 21,
                "description": "copied here (with type `BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdljsn_json.h|erase|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "e91622dfbfae0e09717c5aab9c62052e",
        "hash": "25841f504ec892fd4379aa027dab229f",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `position` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2168,
        "column": 28,
        "procedure": "BloombergLP::bdljsn::JsonObject::erase",
        "procedure_start_line": 2165,
        "file": "groups/bdl/bdljsn/bdljsn_json.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdljsn/bdljsn_json.h",
                "line_number": 2168,
                "column_number": 28,
                "description": "copied here (with type `BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdljsn_json.h|erase|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "299b8073749acd21337dd813d1a9c0b8",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`BloombergLP::bslmf::MovableRefUtil::move()` is copied into field `d_descriptor` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 259,
        "column": 3,
        "procedure": "BloombergLP::bdlm::MetricsRegistry_Data::MetricsRegistry_Data",
        "procedure_start_line": 256,
        "file": "groups/bdl/bdlm/bdlm_metricsregistry.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlm/bdlm_metricsregistry.cpp",
                "line_number": 259,
                "column_number": 3,
                "description": "copied here (with type `BloombergLP::bdlm::MetricDescriptor&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlm_metricsregistry.cpp|MetricsRegistry_Data|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "b523ff3d28cd78396c6e90ca698c4605",
        "hash": "7cad70d110f3f9fc5ec1b5e2864532e5",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bdlm::MetricDescriptor&"
        }
    },
    {
        "bug_type": "NULLPTR_DEREFERENCE",
        "qualifier": "`plink` could be null (from the call to `BloombergLP::bdlma::InfrequentDeleteBlockList::allocate()` on line 165) and is dereferenced.",
        "severity": "ERROR",
        "category": "Null pointer dereference",
        "line": 171,
        "column": 13,
        "procedure": "BloombergLP::bdlma::Pool::reserveCapacity",
        "procedure_start_line": 142,
        "file": "groups/bdl/bdlma/bdlma_pool.cpp",
        "bug_trace": [
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 142,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlma::Pool::reserveCapacity"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 142,
                "column_number": 1,
                "description": "parameter `numBlocks` of BloombergLP::bdlma::Pool::reserveCapacity"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 159,
                "column_number": 5,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 24,
                "description": "in call to `BloombergLP::bdlma::InfrequentDeleteBlockList::allocate`"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlma/bdlma_infrequentdeleteblocklist.cpp",
                "line_number": 78,
                "column_number": 5,
                "description": "is assigned to the null pointer"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlma/bdlma_infrequentdeleteblocklist.cpp",
                "line_number": 78,
                "column_number": 5,
                "description": "returned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 24,
                "description": "return from call to `BloombergLP::bdlma::InfrequentDeleteBlockList::allocate`"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 9,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 166,
                "column_number": 9,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 168,
                "column_number": 13,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 171,
                "column_number": 13,
                "description": "invalid access occurs here"
            }
        ],
        "bug_trace_length": 11,
        "bug_trace_max_depth": 2,
        "key": "bdlma_pool.cpp|reserveCapacity|NULLPTR_DEREFERENCE",
        "node_key": "390b877f047693d83f9ea3b178306716",
        "hash": "ee40982cc1eb76d03f9c3ee354344228",
        "bug_type_hum": "Null Dereference",
        "extras": {}
    },
    {
        "bug_type": "NULLPTR_DEREFERENCE",
        "qualifier": "`plink` could be null (null value originating from line 149) and is dereferenced.",
        "severity": "ERROR",
        "category": "Null pointer dereference",
        "line": 171,
        "column": 13,
        "procedure": "BloombergLP::bdlma::Pool::reserveCapacity",
        "procedure_start_line": 142,
        "file": "groups/bdl/bdlma/bdlma_pool.cpp",
        "bug_trace": [
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 142,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlma::Pool::reserveCapacity"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 142,
                "column_number": 1,
                "description": "parameter `numBlocks` of BloombergLP::bdlma::Pool::reserveCapacity"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 149,
                "column_number": 9,
                "description": "is assigned to the constant 1"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 149,
                "column_number": 9,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 159,
                "column_number": 5,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 24,
                "description": "in call to `BloombergLP::bdlma::InfrequentDeleteBlockList::allocate`"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlma/bdlma_infrequentdeleteblocklist.cpp",
                "line_number": 78,
                "column_number": 5,
                "description": "is assigned to the null pointer"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlma/bdlma_infrequentdeleteblocklist.cpp",
                "line_number": 78,
                "column_number": 5,
                "description": "returned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 24,
                "description": "return from call to `BloombergLP::bdlma::InfrequentDeleteBlockList::allocate`"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 165,
                "column_number": 9,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 166,
                "column_number": 9,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 168,
                "column_number": 13,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlma/bdlma_pool.cpp",
                "line_number": 171,
                "column_number": 13,
                "description": "invalid access occurs here"
            }
        ],
        "bug_trace_length": 13,
        "bug_trace_max_depth": 2,
        "key": "bdlma_pool.cpp|reserveCapacity|NULLPTR_DEREFERENCE",
        "node_key": "390b877f047693d83f9ea3b178306716",
        "hash": "246bb7eff3729f787f5cca5ce72724c4",
        "bug_type_hum": "Null Dereference",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 91, column 13.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 91,
        "column": 13,
        "procedure": "BloombergLP::bdlmt::MultipriorityThreadPool::worker",
        "procedure_start_line": 76,
        "file": "groups/bdl/bdlmt/bdlmt_multiprioritythreadpool.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlmt/bdlmt_multiprioritythreadpool.cpp",
                "line_number": 91,
                "column_number": 13,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlmt_multiprioritythreadpool.cpp|worker|INFINITE_LOOP",
        "node_key": "d57ec936935bec064500fed53a501c29",
        "hash": "7f456c117795376eac5aa74e5065191f",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 443, column 9.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 443,
        "column": 9,
        "procedure": "BloombergLP::bdlmt::MultiQueueThreadPool_Queue::waitWhilePausing",
        "procedure_start_line": 430,
        "file": "groups/bdl/bdlmt/bdlmt_multiqueuethreadpool.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlmt/bdlmt_multiqueuethreadpool.cpp",
                "line_number": 443,
                "column_number": 9,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlmt_multiqueuethreadpool.cpp|waitWhilePausing|INFINITE_LOOP",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "900448709709f160efe755b9c440d4d3",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 420, column 13.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 420,
        "column": 13,
        "procedure": "BloombergLP::bdlmt::TimerEventScheduler::yieldToDispatcher",
        "procedure_start_line": 412,
        "file": "groups/bdl/bdlmt/bdlmt_timereventscheduler.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlmt/bdlmt_timereventscheduler.cpp",
                "line_number": 420,
                "column_number": 13,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlmt_timereventscheduler.cpp|yieldToDispatcher|INFINITE_LOOP",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "36a1da4f5e3dff3139deb5cd6ce37af1",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`nameCount` is read without initialization.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 683,
        "column": 9,
        "procedure": "BloombergLP::bdlpcre::RegEx::namedSubpatternsImp<5118bf9c7f63a2fd>",
        "procedure_start_line": 667,
        "file": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 667,
                "column_number": 1,
                "description": "variable `nameCount` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 683,
                "column_number": 9,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bdlpcre_regex.cpp|namedSubpatternsImp<5118bf9c7f63a2fd>|PULSE_UNINITIALIZED_VALUE",
        "node_key": "25459747190b4d4d8493d1a4c2f4e097",
        "hash": "0960addad72be7d23ce2f888993719ad",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`nameEntrySize` is read without initialization.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 702,
        "column": 38,
        "procedure": "BloombergLP::bdlpcre::RegEx::namedSubpatternsImp<5118bf9c7f63a2fd>",
        "procedure_start_line": 667,
        "file": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 667,
                "column_number": 1,
                "description": "variable `nameEntrySize` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 702,
                "column_number": 38,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bdlpcre_regex.cpp|namedSubpatternsImp<5118bf9c7f63a2fd>|PULSE_UNINITIALIZED_VALUE",
        "node_key": "8b0e8edb90b3285e48bbeb5a0a402ee5",
        "hash": "c52e5486119c4557fd4eba75a08e442d",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`nameTable` is read without initialization.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 706,
        "column": 29,
        "procedure": "BloombergLP::bdlpcre::RegEx::namedSubpatternsImp<5118bf9c7f63a2fd>",
        "procedure_start_line": 667,
        "file": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 667,
                "column_number": 1,
                "description": "variable `nameTable` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 706,
                "column_number": 29,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bdlpcre_regex.cpp|namedSubpatternsImp<5118bf9c7f63a2fd>|PULSE_UNINITIALIZED_VALUE",
        "node_key": "29d02fc01178649288d75d7381b2ec43",
        "hash": "b53fbe5aeecb6907883fe4ce5a1af4a6",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`numSubpatterns` is read without initialization.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1257,
        "column": 12,
        "procedure": "BloombergLP::bdlpcre::RegEx::numSubpatterns",
        "procedure_start_line": 1245,
        "file": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 1245,
                "column_number": 1,
                "description": "variable `numSubpatterns` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlpcre/bdlpcre_regex.cpp",
                "line_number": 1257,
                "column_number": 12,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bdlpcre_regex.cpp|numSubpatterns|PULSE_UNINITIALIZED_VALUE",
        "node_key": "e08783e4a15669118db243910da0768d",
        "hash": "e5d74db9f0b57a7dd0ed0c495133b50d",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`this.d_nonBusinessDays.d_array.d_dataBegin_p` is read without initialization during the call to `BloombergLP::bdlt::Calendar::Calendar()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1440,
        "column": 5,
        "procedure": "BloombergLP::bdlt::Calendar::operator=",
        "procedure_start_line": 1437,
        "file": "groups/bdl/bdlt/bdlt_calendar.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_calendar.h",
                "line_number": 1440,
                "column_number": 5,
                "description": "struct field address `d_nonBusinessDays.d_array.d_dataBegin_p` created"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_calendar.h",
                "line_number": 1440,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlt::Calendar::Calendar` here"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 138,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlt::Calendar::Calendar"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 143,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlt::Calendar::synchronizeCache` here"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 24,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlt::Calendar::synchronizeCache"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 27,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlc::BitArray::setLength` here"
            },
            {
                "level": 3,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.cpp",
                "line_number": 186,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlc::BitArray::setLength"
            },
            {
                "level": 3,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.cpp",
                "line_number": 212,
                "column_number": 5,
                "description": "when calling `bsl::vector<unsigned long,bsl::allocator<unsigned long>>::resize` here"
            },
            {
                "level": 4,
                "filename": "groups/bsl/bslstl/bslstl_vector.h",
                "line_number": 3607,
                "column_number": 1,
                "description": "parameter `this` of bsl::vector<unsigned long,bsl::allocator<unsigned long>>::resize"
            },
            {
                "level": 4,
                "filename": "groups/bsl/bslstl/bslstl_vector.h",
                "line_number": 3613,
                "column_number": 20,
                "description": "when calling `bsl::vectorBase<unsigned long>::size` here"
            },
            {
                "level": 5,
                "filename": "groups/bsl/bslstl/bslstl_vector.h",
                "line_number": 2598,
                "column_number": 1,
                "description": "parameter `this` of bsl::vectorBase<unsigned long>::size"
            },
            {
                "level": 5,
                "filename": "groups/bsl/bslstl/bslstl_vector.h",
                "line_number": 2602,
                "column_number": 26,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 12,
        "bug_trace_max_depth": 5,
        "key": "bdlt_calendar.h|operator=|PULSE_UNINITIALIZED_VALUE",
        "node_key": "a271d4ed76b04cd811600a7afadf7b1d",
        "hash": "260b9a2a72adc6875615f2a18a8981c1",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`this.d_nonBusinessDays.d_length` is read without initialization during the call to `BloombergLP::bdlt::Calendar::Calendar()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1440,
        "column": 5,
        "procedure": "BloombergLP::bdlt::Calendar::operator=",
        "procedure_start_line": 1437,
        "file": "groups/bdl/bdlt/bdlt_calendar.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_calendar.h",
                "line_number": 1440,
                "column_number": 5,
                "description": "struct field address `d_nonBusinessDays.d_length` created"
            },
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_calendar.h",
                "line_number": 1440,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlt::Calendar::Calendar` here"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 138,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlt::Calendar::Calendar"
            },
            {
                "level": 1,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 143,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlt::Calendar::synchronizeCache` here"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 24,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlt::Calendar::synchronizeCache"
            },
            {
                "level": 2,
                "filename": "groups/bdl/bdlt/bdlt_calendar.cpp",
                "line_number": 27,
                "column_number": 5,
                "description": "when calling `BloombergLP::bdlc::BitArray::setLength` here"
            },
            {
                "level": 3,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.cpp",
                "line_number": 186,
                "column_number": 1,
                "description": "parameter `this` of BloombergLP::bdlc::BitArray::setLength"
            },
            {
                "level": 3,
                "filename": "groups/bdl/bdlc/bdlc_bitarray.cpp",
                "line_number": 188,
                "column_number": 30,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 8,
        "bug_trace_max_depth": 3,
        "key": "bdlt_calendar.h|operator=|PULSE_UNINITIALIZED_VALUE",
        "node_key": "a271d4ed76b04cd811600a7afadf7b1d",
        "hash": "8103616aa35e3010eb3bd7ca3b1a438f",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `lhsHCE` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 74,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 74,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 74,
                "column_number": 1,
                "description": "Parameter lhsHCE with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "6c0b9d3e0dbdc327bfb3667ca13e8c87",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `lhsHC` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 74,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 74,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 74,
                "column_number": 1,
                "description": "Parameter lhsHC with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "02596ce245ae9f5a9a6e85b1c94aef07",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `lhsHCE` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 96,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 96,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 96,
                "column_number": 1,
                "description": "Parameter lhsHCE with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "6c0b9d3e0dbdc327bfb3667ca13e8c87",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `lhsHC` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 96,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 96,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 96,
                "column_number": 1,
                "description": "Parameter lhsHC with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "02596ce245ae9f5a9a6e85b1c94aef07",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `rhsHCE` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 96,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 96,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 96,
                "column_number": 1,
                "description": "Parameter rhsHCE with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "c9e8309a9e1d46a5923dd4d62f1bfc7f",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `rhsHC` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 96,
        "column": 1,
        "procedure": "BloombergLP::bdlt::appendHoliday",
        "procedure_start_line": 96,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 96,
                "column_number": 1,
                "description": "Parameter rhsHC with type `BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|BloombergLP::bdlt::appendHoliday|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "3dfb306422c58a933cf70f1a8d33a2ad",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlt::PackedCalendar_HolidayCodeConstIterator"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `&b` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 896,
        "column": 52,
        "procedure": "BloombergLP::bdlt::PackedCalendar::setValidRange",
        "procedure_start_line": 869,
        "file": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlt/bdlt_packedcalendar.cpp",
                "line_number": 896,
                "column_number": 52,
                "description": "copied here (with type `BloombergLP::bdlc::PackedIntArrayConstIterator<int>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bdlt_packedcalendar.cpp|setValidRange|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "7fff9862b3a501c3a576e1e0dd0e481d",
        "hash": "037837129f574fbaf85e54056a6330c8",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bdlc::PackedIntArrayConstIterator<int>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 211,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayDestructionPrimitives::destroy<10bc7951ad9c1ca7>",
        "procedure_start_line": 211,
        "file": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
                "line_number": 211,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arraydestructionprimitives.h|destroy<10bc7951ad9c1ca7>|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "fcd7036bdc9e82c6f15d78cffe8f30a6",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 250,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayDestructionPrimitives::destroy<10bc7951ad9c1ca7>",
        "procedure_start_line": 250,
        "file": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
                "line_number": 250,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arraydestructionprimitives.h|destroy<10bc7951ad9c1ca7>|PULSE_CONST_REFABLE",
        "node_key": "beb7dfba0bea12e9c9ab99f820d82919",
        "hash": "fcd7036bdc9e82c6f15d78cffe8f30a6",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 261,
        "column": 13,
        "procedure": "BloombergLP::bslalg::ArrayDestructionPrimitives::destroy<10bc7951ad9c1ca7>",
        "procedure_start_line": 250,
        "file": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arraydestructionprimitives.h",
                "line_number": 261,
                "column_number": 13,
                "description": "copied here (with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arraydestructionprimitives.h|destroy<10bc7951ad9c1ca7>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "beb7dfba0bea12e9c9ab99f820d82919",
        "hash": "1cc776d2c7874525078a47ee3faa4757",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2104,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<4405bbc2e9cbeb7b>",
        "procedure_start_line": 2104,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2104,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<signed char>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndEmplace<4405bbc2e9cbeb7b>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "5df9ee2a7f70557f24534373fd7a2514",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<signed char>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2167,
        "column": 21,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndEmplace<4405bbc2e9cbeb7b>",
        "procedure_start_line": 2104,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2167,
                "column_number": 21,
                "description": "copied here (with type `bsl::allocator<signed char>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndEmplace<4405bbc2e9cbeb7b>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "eed064d58e94f69d325f0ab5394bf83a",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<signed char>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2175,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<2d708d9d98f184d0>",
        "procedure_start_line": 2175,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2175,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlb::BigEndianInt64>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<2d708d9d98f184d0>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "c7855aceb37cf51016b4e1839b265713",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::BigEndianInt64>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2234,
        "column": 21,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<2d708d9d98f184d0>",
        "procedure_start_line": 2175,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2234,
                "column_number": 21,
                "description": "copied here (with type `bsl::allocator<BloombergLP::bdlb::BigEndianInt64>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<2d708d9d98f184d0>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "b02d71f18d1f385598cb1f7466fdf822",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::BigEndianInt64>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2261,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<45becdd85b5287b9>",
        "procedure_start_line": 2261,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2261,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<45becdd85b5287b9>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "9c03ab8de70252928228e71a2947878c",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2324,
        "column": 21,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<45becdd85b5287b9>",
        "procedure_start_line": 2261,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2324,
                "column_number": 21,
                "description": "copied here (with type `bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<45becdd85b5287b9>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "ce13058104cb72d0b5b57e3d99ba5601",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2352,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<12762054b862cd72>",
        "procedure_start_line": 2352,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2352,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlb::NullableValue<_Bool>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<12762054b862cd72>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "0222a998c138a873b39ca3d6aaeb9e53",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::NullableValue<_Bool>>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2415,
        "column": 21,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndInsert<12762054b862cd72>",
        "procedure_start_line": 2352,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2415,
                "column_number": 21,
                "description": "copied here (with type `bsl::allocator<BloombergLP::bdlb::NullableValue<_Bool>>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndInsert<12762054b862cd72>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "3f4289d2a501fb2c29ed9e52d7b38c2f",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::NullableValue<_Bool>>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2446,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndMoveInsert<bsl::allocator<_Bool>_>",
        "procedure_start_line": 2446,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2446,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<_Bool>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndMoveInsert<bsl::allocator<_Bool>_>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "419037d674ab45657b2261760d528229",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<_Bool>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2514,
        "column": 21,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives::destructiveMoveAndMoveInsert<bsl::allocator<_Bool>_>",
        "procedure_start_line": 2446,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2514,
                "column_number": 21,
                "description": "copied here (with type `bsl::allocator<_Bool>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMoveAndMoveInsert<bsl::allocator<_Bool>_>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "cbd723adf95dbb138fff2c5ae3c38e91",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<_Bool>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3448,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::copyConstruct<1bb5806661ff598e>",
        "procedure_start_line": 3448,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3448,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlbb::BlobBuffer>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|copyConstruct<1bb5806661ff598e>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "54c18bc858befbca9e6b31e356bcfbcf",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlbb::BlobBuffer>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3497,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::moveConstruct<1cd0f15d7b0655e7>",
        "procedure_start_line": 3497,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3497,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::s_baltst::MySequenceWithChoiceArrayChoice>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|moveConstruct<1cd0f15d7b0655e7>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "7b2859e2ebcb9f9db228d1348ca109c3",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::s_baltst::MySequenceWithChoiceArrayChoice>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3523,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::moveIfNoexcept<10bc7951ad9c1ca7>",
        "procedure_start_line": 3523,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3523,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|moveIfNoexcept<10bc7951ad9c1ca7>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "fff19a862b3a1fe19f0218efa6007440",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3570,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::defaultConstruct<4e696d2c834ebfcb>",
        "procedure_start_line": 3570,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3570,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<unsigned long,unsigned long>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|defaultConstruct<4e696d2c834ebfcb>|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "ca0887a221bd52eef2c2088131dcc09d",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<unsigned long,unsigned long>>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3589,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::defaultConstruct<1d154172b7fc5a57>",
        "procedure_start_line": 3589,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3589,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::vector<bsl::vector<double,bsl::allocator<double>>,bsl::allocator<bsl::vector<double,bsl::allocator<double>>>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|defaultConstruct<1d154172b7fc5a57>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "5e2135e9936676a57648130255048fdd",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::vector<bsl::vector<double,bsl::allocator<double>>,bsl::allocator<bsl::vector<double,bsl::allocator<double>>>>>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3631,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::destructiveMove<10bc7951ad9c1ca7>",
        "procedure_start_line": 3631,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3631,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMove<10bc7951ad9c1ca7>|PULSE_CONST_REFABLE",
        "node_key": "9290d6114ddfa0857c72e088e32ec11a",
        "hash": "d135c6678499478b75f1561ce9b90881",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3648,
        "column": 61,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::destructiveMove<10bc7951ad9c1ca7>",
        "procedure_start_line": 3631,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3648,
                "column_number": 61,
                "description": "copied here (with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|destructiveMove<10bc7951ad9c1ca7>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "9290d6114ddfa0857c72e088e32ec11a",
        "hash": "cb11ac253fbdf5cda5a37c86e1012c8f",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3655,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::emplace<8254ab67fd74676c>",
        "procedure_start_line": 3655,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3655,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<unsigned long>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|emplace<8254ab67fd74676c>|PULSE_CONST_REFABLE",
        "node_key": "fc19a5316f2be94643619d33cdcda0b1",
        "hash": "824b6610d8a977f05d7a2f27891d96dc",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3671,
        "column": 23,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::emplace<8254ab67fd74676c>",
        "procedure_start_line": 3655,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3671,
                "column_number": 23,
                "description": "copied here (with type `bsl::allocator<unsigned long>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|emplace<8254ab67fd74676c>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "fc19a5316f2be94643619d33cdcda0b1",
        "hash": "8986d55b4517a6f10ffc3a836b9f1256",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3677,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::emplace<8254ab67fd74676c>",
        "procedure_start_line": 3677,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3677,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<unsigned long>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|emplace<8254ab67fd74676c>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "824b6610d8a977f05d7a2f27891d96dc",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3841,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::erase<1231304c57a03c09>",
        "procedure_start_line": 3841,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3841,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::balb::CustomInt>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|erase<1231304c57a03c09>|PULSE_CONST_REFABLE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "bd9eb4aa8484dce79d6ace7297bcf04a",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::balb::CustomInt>>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3861,
        "column": 56,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::erase<1231304c57a03c09>",
        "procedure_start_line": 3841,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3861,
                "column_number": 56,
                "description": "copied here (with type `bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::balb::CustomInt>>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|erase<1231304c57a03c09>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "2926bd5cad4b30c52863e735a60c04d3",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlb::NullableValue<BloombergLP::balb::CustomInt>>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3874,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::erase<10bc7951ad9c1ca7>",
        "procedure_start_line": 3874,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3874,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|erase<10bc7951ad9c1ca7>|PULSE_CONST_REFABLE",
        "node_key": "9290d6114ddfa0857c72e088e32ec11a",
        "hash": "dcffde25915d0c3b7eef820702cf096b",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>,bsl::function<_fn_>>>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3909,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::insert<52754cee6e9a73b>",
        "procedure_start_line": 3909,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3909,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<unsigned long long>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|insert<52754cee6e9a73b>|PULSE_CONST_REFABLE",
        "node_key": "ad8fc35725a4bc9e3acb67485246284f",
        "hash": "39358b76f2dd70dc1f4724a86c738281",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long long>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3972,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::insert<492ec1eb44c0779d>",
        "procedure_start_line": 3972,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 3972,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|insert<492ec1eb44c0779d>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "621b9aff6f975654f19c0782afa69c8a",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::baltzo::ZoneinfoTransition>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4290,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::insert<1bb5806661ff598e>",
        "procedure_start_line": 4290,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4290,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlbb::BlobBuffer>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|insert<1bb5806661ff598e>|PULSE_CONST_REFABLE",
        "node_key": "61134c01b11cce8d3f331b25d7a8e66d",
        "hash": "c2457f794e5a9fd47062225ebd7a0985",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlbb::BlobBuffer>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4390,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::insert<404f40a751468883>",
        "procedure_start_line": 4390,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4390,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<unsigned long>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|insert<404f40a751468883>|PULSE_CONST_REFABLE",
        "node_key": "ed1608a421d78d56dd72eb70af7f1aee",
        "hash": "e7f6513ba9733d985203670d821d0b9a",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4485,
        "column": 23,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::insert<8a0732ad15ddd7cb>",
        "procedure_start_line": 4390,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4485,
                "column_number": 23,
                "description": "copied here (with type `bsl::allocator<BloombergLP::ball::ManagedAttribute>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|insert<8a0732ad15ddd7cb>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "ed1608a421d78d56dd72eb70af7f1aee",
        "hash": "ca0ad99ef5ba4cdc744279d83c9c67d3",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::ball::ManagedAttribute>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4557,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::moveInsert<52754cee6e9a73b>",
        "procedure_start_line": 4557,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4557,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<unsigned long long>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|moveInsert<52754cee6e9a73b>|PULSE_CONST_REFABLE",
        "node_key": "56bf20f06bff3e93bf19a14345045b48",
        "hash": "269dfbe5fe8e6d536b28e871c5b8e2d8",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long long>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4577,
        "column": 54,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::moveInsert<52754cee6e9a73b>",
        "procedure_start_line": 4557,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4577,
                "column_number": 54,
                "description": "copied here (with type `bsl::allocator<unsigned long long>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|moveInsert<52754cee6e9a73b>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "56bf20f06bff3e93bf19a14345045b48",
        "hash": "39839d2c232b3127edb83f062d13d82e",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<unsigned long long>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4768,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::shiftAndInsert<bsl::allocator<_Bool>_>",
        "procedure_start_line": 4768,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4768,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<_Bool>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|shiftAndInsert<bsl::allocator<_Bool>_>|PULSE_CONST_REFABLE",
        "node_key": "9290d6114ddfa0857c72e088e32ec11a",
        "hash": "b280b5d9f10e296965a15d916bec85ce",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<_Bool>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4812,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::shiftAndInsert<8ed888961ba1f859>",
        "procedure_start_line": 4812,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4812,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlbb::BlobBuffer>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|shiftAndInsert<8ed888961ba1f859>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "14a7de7892601b42f43db5bc70f1109d",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlbb::BlobBuffer>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4878,
        "column": 1,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::shiftAndInsert<723af196a3c05d78>",
        "procedure_start_line": 4878,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4878,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<BloombergLP::bdlt::Timetable_CompactableTransition>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|shiftAndInsert<723af196a3c05d78>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "2f1e10d263d7effdb676caa67b0f17b4",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlt::Timetable_CompactableTransition>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4920,
        "column": 69,
        "procedure": "BloombergLP::bslalg::ArrayPrimitives_Imp::shiftAndInsert<723af196a3c05d78>",
        "procedure_start_line": 4878,
        "file": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4920,
                "column_number": 69,
                "description": "copied here (with type `bsl::allocator<BloombergLP::bdlt::Timetable_CompactableTransition>&`)"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_arrayprimitives.h|shiftAndInsert<723af196a3c05d78>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "8e3dd3515fd93473990764132ba8e4bc",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::bdlt::Timetable_CompactableTransition>&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 255,
        "column": 3,
        "procedure": "BloombergLP::bslalg::AutoArrayDestructor<BloombergLP::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_baltzo_baltzo_zoneinfobinaryreader.cpp::RawLeapInfo,bsl::allocator<BloombergLP::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_baltzo_baltzo_zoneinfobinaryreader.cpp::RawLeapInfo>>::AutoArrayDestructor",
        "procedure_start_line": 248,
        "file": "groups/bsl/bslalg/bslalg_autoarraydestructor.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 2209,
                "column_number": 48,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_autoarraydestructor.h",
                "line_number": 255,
                "column_number": 3,
                "description": "copied here (with type `bsl::allocator<BloombergLP::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_baltzo_baltzo_zoneinfobinaryreader.cpp::RawLeapInfo>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslalg_autoarraydestructor.h|AutoArrayDestructor|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "25b068f03c6a2ba86b68510767649e56",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::anonymous_namespace__huge_jvanegue_pulse-experiments_bde_groups_bal_baltzo_baltzo_zoneinfobinaryreader.cpp::RawLeapInfo>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 466,
        "column": 3,
        "procedure": "BloombergLP::bslalg::AutoArrayMoveDestructor<BloombergLP::balb::Choice1,bsl::allocator<BloombergLP::balb::Choice1>>::AutoArrayMoveDestructor",
        "procedure_start_line": 455,
        "file": "groups/bsl/bslalg/bslalg_autoarraymovedestructor.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_arrayprimitives.h",
                "line_number": 4345,
                "column_number": 53,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_autoarraymovedestructor.h",
                "line_number": 466,
                "column_number": 3,
                "description": "copied here (with type `bsl::allocator<BloombergLP::balb::Choice1>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslalg_autoarraymovedestructor.h|AutoArrayMoveDestructor|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "6c8844de6de972cadbac7e67d542bb95",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<BloombergLP::balb::Choice1>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1105,
        "column": 1,
        "procedure": "BloombergLP::bslalg::DequePrimitives<bsl::function<_fn_>,16>::destruct<606eb519b3286317>",
        "procedure_start_line": 1105,
        "file": "groups/bsl/bslalg/bslalg_dequeprimitives.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_dequeprimitives.h",
                "line_number": 1105,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<bsl::function<_fn_>>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_dequeprimitives.h|destruct<606eb519b3286317>|PULSE_CONST_REFABLE",
        "node_key": "89e1fea3672f8c1bda5df785b829cfa3",
        "hash": "b59961d4ab251d77775d00fb726b50fb",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<bsl::function<_fn_>>"
        }
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 1631, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 1631,
        "column": 5,
        "procedure": "BloombergLP::bslalg::RbTreeUtil::findUniqueInsertLocation<c830284f80f176f>",
        "procedure_start_line": 1613,
        "file": "groups/bsl/bslalg/bslalg_rbtreeutil.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslalg/bslalg_rbtreeutil.h",
                "line_number": 1631,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslalg_rbtreeutil.h|findUniqueInsertLocation<c830284f80f176f>|INFINITE_LOOP",
        "node_key": "fa0c051eb65fbf8d37c52865108bb194",
        "hash": "33a9023134c14bd63d480d227d9552a7",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`BloombergLP::bslmf::MovableRefUtil::access().d_members` is copied into field `d_members` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 1949,
        "column": 3,
        "procedure": "BloombergLP::bslma::ManagedPtr<char>::ManagedPtr",
        "procedure_start_line": 1946,
        "file": "groups/bsl/bslma/bslma_managedptr.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bal/ball/ball_loggermanager.cpp",
                "line_number": 649,
                "column_number": 33,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslma/bslma_managedptr.h",
                "line_number": 1949,
                "column_number": 3,
                "description": "copied here (with type `BloombergLP::bslma::ManagedPtr_Members&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslma_managedptr.h|ManagedPtr|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "24b6e6bf9b580ad5f30bf9419892378e",
        "hash": "61fe71b2dd439dcdac5a080427b81a17",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bslma::ManagedPtr_Members&"
        }
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 52, column 9.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 52,
        "column": 9,
        "procedure": "BloombergLP::bslmt::Barrier::timedWait",
        "procedure_start_line": 39,
        "file": "groups/bsl/bslmt/bslmt_barrier.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_barrier.cpp",
                "line_number": 52,
                "column_number": 9,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_barrier.cpp|timedWait|INFINITE_LOOP",
        "node_key": "e91622dfbfae0e09717c5aab9c62052e",
        "hash": "cb37339209d56532fdcd80d87385ef4f",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 78, column 9.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 78,
        "column": 9,
        "procedure": "BloombergLP::bslmt::Barrier::wait",
        "procedure_start_line": 65,
        "file": "groups/bsl/bslmt/bslmt_barrier.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_barrier.cpp",
                "line_number": 78,
                "column_number": 9,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_barrier.cpp|wait|INFINITE_LOOP",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "6292a4591f6a3ba7121bba537ee932f1",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 599, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 599,
        "column": 5,
        "procedure": "BloombergLP::bslmt::FastPostSemaphoreImpl<BloombergLP::bsls::AtomicOperations,BloombergLP::bslmt::Mutex,BloombergLP::bslmt::Condition,BloombergLP::bslmt::ThreadUtil>::disable",
        "procedure_start_line": 595,
        "file": "groups/bsl/bslmt/bslmt_fastpostsemaphoreimpl.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_fastpostsemaphoreimpl.h",
                "line_number": 599,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_fastpostsemaphoreimpl.h|disable|INFINITE_LOOP",
        "node_key": "6327dc05e2e185b1cb138166508af251",
        "hash": "a0fa2ad1e021497f91f91ae16cefe564",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 82, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 82,
        "column": 5,
        "procedure": "BloombergLP::bslmt::Latch::timedWait",
        "procedure_start_line": 73,
        "file": "groups/bsl/bslmt/bslmt_latch.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_latch.cpp",
                "line_number": 82,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_latch.cpp|timedWait|INFINITE_LOOP",
        "node_key": "062af31f18c5343afc1f995a5c2b07b6",
        "hash": "ad24beccf3d4f2b33c877269592bceb3",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 96, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 96,
        "column": 5,
        "procedure": "BloombergLP::bslmt::Latch::wait",
        "procedure_start_line": 88,
        "file": "groups/bsl/bslmt/bslmt_latch.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_latch.cpp",
                "line_number": 96,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_latch.cpp|wait|INFINITE_LOOP",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "a74e3e4ecab21c74f019f620852712ca",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 274, column 13.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 274,
        "column": 13,
        "procedure": "BloombergLP::bslmt::ReaderWriterLock::upgradeToWriteLock",
        "procedure_start_line": 198,
        "file": "groups/bsl/bslmt/bslmt_readerwriterlock.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_readerwriterlock.cpp",
                "line_number": 274,
                "column_number": 13,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_readerwriterlock.cpp|upgradeToWriteLock|INFINITE_LOOP",
        "node_key": "7ee60958d22eacf179b48d6328ad2138",
        "hash": "4de019c6f86653af2b075140eaef6aba",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 338, column 9.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 338,
        "column": 9,
        "procedure": "BloombergLP::bslmt::ReaderWriterLock::tryUpgradeToWriteLock",
        "procedure_start_line": 290,
        "file": "groups/bsl/bslmt/bslmt_readerwriterlock.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslmt/bslmt_readerwriterlock.cpp",
                "line_number": 338,
                "column_number": 9,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslmt_readerwriterlock.cpp|tryUpgradeToWriteLock|INFINITE_LOOP",
        "node_key": "a3aee70cdd866ec20ce3b01b9f7929e4",
        "hash": "4b04cd4953aad4f542cd2731f4f7efbc",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 99, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 99,
        "column": 5,
        "procedure": "BloombergLP::bsls::AssertImpUtil::failBySleep",
        "procedure_start_line": 95,
        "file": "groups/bsl/bsls/bsls_assertimputil.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bsls/bsls_assertimputil.cpp",
                "line_number": 99,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bsls_assertimputil.cpp|failBySleep|INFINITE_LOOP",
        "node_key": "33a2afe0f1403a3d30ef198dc1f0c3a4",
        "hash": "5722b09f1860a03b2878c49d52c05a40",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 55, column 9.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 55,
        "column": 9,
        "procedure": "BloombergLP::bsls::BslOnce::doEnter",
        "procedure_start_line": 39,
        "file": "groups/bsl/bsls/bsls_bslonce.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bsls/bsls_bslonce.cpp",
                "line_number": 55,
                "column_number": 9,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bsls_bslonce.cpp|doEnter|INFINITE_LOOP",
        "node_key": "fa0c051eb65fbf8d37c52865108bb194",
        "hash": "47e7b3aa5285c227c74ec4464057a6ee",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3212,
        "column": 3,
        "procedure": "BloombergLP::bslstl::Optional_Base<BloombergLP::balb::Choice1,1>::Optional_Base",
        "procedure_start_line": 3208,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 1805,
                "column_number": 25,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 3212,
                "column_number": 3,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|Optional_Base|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "8ba807becccb0e0f7760d12ea0bda98a",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3232,
        "column": 3,
        "procedure": "BloombergLP::bslstl::Optional_Base<BloombergLP::balb::Choice1,1>::Optional_Base",
        "procedure_start_line": 3227,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 1805,
                "column_number": 25,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 3232,
                "column_number": 3,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|Optional_Base|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "8ba807becccb0e0f7760d12ea0bda98a",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 3245,
        "column": 3,
        "procedure": "BloombergLP::bslstl::Optional_Base<BloombergLP::s_baltst::Choice1,1>::Optional_Base",
        "procedure_start_line": 3240,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 1805,
                "column_number": 25,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 3245,
                "column_number": 3,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|Optional_Base|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "c1d780a30890a1959aa2c529d08326c6",
        "hash": "c740cc57d8703d0f353e28c0b9d80943",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4739,
        "column": 1,
        "procedure": "bsl::optional<BloombergLP::balb::Choice1>::optional",
        "procedure_start_line": 4739,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4739,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<char>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional|PULSE_CONST_REFABLE",
        "node_key": "e9a0e2d94b31aec4a4b2c75d08bd5b8d",
        "hash": "0f214a8735c18968c09409068cbaa692",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<char>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4740,
        "column": 32,
        "procedure": "bsl::optional<BloombergLP::balb::Choice1>::optional",
        "procedure_start_line": 4739,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlb/bdlb_nullablevalue.h",
                "line_number": 213,
                "column_number": 30,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4740,
                "column_number": 32,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "e9a0e2d94b31aec4a4b2c75d08bd5b8d",
        "hash": "3917f76bfb6c64023f51f3f6e8fe72dc",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4753,
        "column": 1,
        "procedure": "bsl::optional<BloombergLP::balb::Choice1>::optional",
        "procedure_start_line": 4753,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4753,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<char>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional|PULSE_CONST_REFABLE",
        "node_key": "5a51b37336bbaa1a945e082ef040f544",
        "hash": "0f214a8735c18968c09409068cbaa692",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<char>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4756,
        "column": 32,
        "procedure": "bsl::optional<BloombergLP::balb::Choice1>::optional",
        "procedure_start_line": 4753,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlb/bdlb_nullablevalue.h",
                "line_number": 213,
                "column_number": 30,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4756,
                "column_number": 32,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "5a51b37336bbaa1a945e082ef040f544",
        "hash": "3917f76bfb6c64023f51f3f6e8fe72dc",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4762,
        "column": 1,
        "procedure": "bsl::optional<BloombergLP::s_baltst::Choice1>::optional<e835ac900d91d6a3>",
        "procedure_start_line": 4762,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4762,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<char>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional<e835ac900d91d6a3>|PULSE_CONST_REFABLE",
        "node_key": "4ddad98a13cab89f3afa4b0c65a0beb9",
        "hash": "d9ea7df9d8a526a47b66453f04ce3f98",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<char>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "variable `allocator` is copied into an intermediate and is never modified.",
        "suggestion": "To avoid the copy, call `std::move` instead or change the callee's parameter type to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 4768,
        "column": 12,
        "procedure": "bsl::optional<BloombergLP::s_baltst::Choice1>::optional<e835ac900d91d6a3>",
        "procedure_start_line": 4762,
        "file": "groups/bsl/bslstl/bslstl_optional.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bdl/bdlb/bdlb_nullablevalue.h",
                "line_number": 213,
                "column_number": 30,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_optional.h",
                "line_number": 4768,
                "column_number": 12,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_optional.h|optional<e835ac900d91d6a3>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "4ddad98a13cab89f3afa4b0c65a0beb9",
        "hash": "af8a194d06b0f5bdaa3ee06f531eb05b",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`BloombergLP::bsls::Util::forward()` is copied into field `first` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2132,
        "column": 3,
        "procedure": "bsl::Pair_First<BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>>::Pair_First<3191d0124f6ca6fb>",
        "procedure_start_line": 2123,
        "file": "groups/bsl/bslstl/bslstl_pair.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_pair.h",
                "line_number": 1166,
                "column_number": 21,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_pair.h",
                "line_number": 2132,
                "column_number": 3,
                "description": "copied here (with type `BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_pair.h|Pair_First<3191d0124f6ca6fb>|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "24b6e6bf9b580ad5f30bf9419892378e",
        "hash": "26295f86f5d3e725beb7a4cdb8a80966",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "BloombergLP::bslstl::HashTableIterator<bsl::pair<bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>> const ,BloombergLP::bdljsn::Json>,long>&"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `basicAllocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 6401,
        "column": 1,
        "procedure": "bsl::allocate_shared<6ab32a0d4dc2c717>",
        "procedure_start_line": 6401,
        "file": "groups/bsl/bslstl/bslstl_sharedptr.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_sharedptr.h",
                "line_number": 6401,
                "column_number": 1,
                "description": "Parameter basicAllocator with type `bsl::allocator<int>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_sharedptr.h|bsl::allocate_shared<6ab32a0d4dc2c717>|PULSE_CONST_REFABLE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "8caa244190b7cf15ed3d8ded1a041dd7",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<int>"
        }
    },
    {
        "bug_type": "INFINITE_LOOP",
        "qualifier": "Recurring state leading to infinite execution at line 91, column 5.",
        "severity": "ERROR",
        "category": "No_category",
        "line": 91,
        "column": 5,
        "procedure": "BloombergLP::bslstl::StopState::deregister",
        "procedure_start_line": 71,
        "file": "groups/bsl/bslstl/bslstl_stopstate.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_stopstate.cpp",
                "line_number": 91,
                "column_number": 5,
                "description": "in loop"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_stopstate.cpp|deregister|INFINITE_LOOP",
        "node_key": "e1000a1bd717f93a40e9389b449c7fad",
        "hash": "5d46feb124f72f0f449c03501e6f91aa",
        "bug_type_hum": "Infinite Loop",
        "extras": {}
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `allocator` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 61,
        "column": 1,
        "procedure": "bsl::stop_source::stop_source",
        "procedure_start_line": 61,
        "file": "groups/bsl/bslstl/bslstl_stoptoken.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_stoptoken.cpp",
                "line_number": 61,
                "column_number": 1,
                "description": "Parameter allocator with type `bsl::allocator<char>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_stoptoken.cpp|stop_source|PULSE_CONST_REFABLE",
        "node_key": "c6fa565f3b7c7ccae1833e95de7ade09",
        "hash": "0922d58c165c796188b9d601f72e82f0",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "bsl::allocator<char>"
        }
    },
    {
        "bug_type": "PULSE_CONST_REFABLE",
        "qualifier": "Function parameter `operation` is passed by-value but not modified inside this function, resulting in a potential unnecessary copy at the function's callsites.",
        "suggestion": "Change the type of the parameter to `const &`.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 5402,
        "column": 1,
        "procedure": "bsl::basic_string<char,std::char_traits<char>,bsl::allocator<char>>::resize_and_overwrite<136a0a417d107dd4>",
        "procedure_start_line": 5402,
        "file": "groups/bsl/bslstl/bslstl_string.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_string.h",
                "line_number": 5402,
                "column_number": 1,
                "description": "Parameter operation with type `BloombergLP::bdlf::MemFnInstance<void,std::basic_streambuf<char,std::char_traits<char>>*>`"
            }
        ],
        "bug_trace_length": 1,
        "bug_trace_max_depth": 0,
        "key": "bslstl_string.h|resize_and_overwrite<136a0a417d107dd4>|PULSE_CONST_REFABLE",
        "node_key": "e5dfa1e1409756bdc4277d472b543297",
        "hash": "65a3b6cb543184f54f6bf2da359a07ac",
        "bug_type_hum": "Const Refable Parameter",
        "extras": {
            "copy_type": "BloombergLP::bdlf::MemFnInstance<void,std::basic_streambuf<char,std::char_traits<char>>*>"
        }
    },
    {
        "bug_type": "PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "qualifier": "`allocator` is copied into field `d_allocator` but is not modified afterwards.",
        "suggestion": "Rather than copying into the field, move into it instead.",
        "severity": "ERROR",
        "category": "Perf regression",
        "line": 2889,
        "column": 7,
        "procedure": "BloombergLP::bslstl::Variant_AllocatorBase<1>::Variant_AllocatorBase",
        "procedure_start_line": 2888,
        "file": "groups/bsl/bslstl/bslstl_variant.h",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_variant.h",
                "line_number": 2864,
                "column_number": 8,
                "description": "first instantiated at"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslstl/bslstl_variant.h",
                "line_number": 2889,
                "column_number": 7,
                "description": "copied here (with type `bsl::allocator<char>&`)"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "bslstl_variant.h|Variant_AllocatorBase|PULSE_UNNECESSARY_COPY_INTERMEDIATE",
        "node_key": "71c5e3a68a6f72fd62e4aeb1d81b3ee8",
        "hash": "d07c5fda9972827a5ebf6eab35ad20d3",
        "bug_type_hum": "Unnecessary Copy Intermediate",
        "extras": {
            "copy_type": "bsl::allocator<char>&"
        },
        "autofix": {
            "original": "d_allocator(allocator)",
            "replacement": "d_allocator(std::move(allocator))"
        }
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`length` is read without initialization during the call to `BloombergLP::bslx::TestInStream::getLength()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 467,
        "column": 5,
        "procedure": "BloombergLP::bslx::TestInStream::getString",
        "procedure_start_line": 464,
        "file": "groups/bsl/bslx/bslx_testinstream.cpp",
        "bug_trace": [
            {
                "level": 0,
                "filename": "groups/bsl/bslx/bslx_testinstream.cpp",
                "line_number": 464,
                "column_number": 1,
                "description": "variable `length` declared here"
            },
            {
                "level": 0,
                "filename": "groups/bsl/bslx/bslx_testinstream.cpp",
                "line_number": 467,
                "column_number": 5,
                "description": "when calling `BloombergLP::bslx::TestInStream::getLength` here"
            },
            {
                "level": 1,
                "filename": "groups/bsl/bslx/bslx_testinstream.cpp",
                "line_number": 135,
                "column_number": 1,
                "description": "parameter `variable` of BloombergLP::bslx::TestInStream::getLength"
            },
            {
                "level": 1,
                "filename": "groups/bsl/bslx/bslx_testinstream.cpp",
                "line_number": 148,
                "column_number": 17,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "bslx_testinstream.cpp|getString|PULSE_UNINITIALIZED_VALUE",
        "node_key": "65ff89e87db15c052009da72e05071c5",
        "hash": "1bff7f52a1f863ebef1f1bc223cf77d9",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`y.sign` is read without initialization during the call to `__dpml_bid_multiply__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 84,
        "column": 5,
        "procedure": "bid_f128_mul",
        "procedure_start_line": 65,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 65,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 222,
                "column_number": -1,
                "description": "struct field address `sign` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 84,
                "column_number": 5,
                "description": "when calling `__dpml_bid_multiply__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops_64.c",
                "line_number": 43,
                "column_number": 1,
                "description": "parameter `y` of __dpml_bid_multiply__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops_64.c",
                "line_number": 56,
                "column_number": 9,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 106,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "dpml_ux_bid.c|bid_f128_mul|PULSE_UNINITIALIZED_VALUE",
        "node_key": "cf0297b55f41cdc5e428d3c95e4a2814",
        "hash": "06b932001ed0c886e22d72d66fef0e6a",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`y.sign` is read without initialization during the call to `__dpml_bid_addsub__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 154,
        "column": 5,
        "procedure": "bid_f128_add",
        "procedure_start_line": 135,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 135,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 222,
                "column_number": -1,
                "description": "struct field address `sign` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 154,
                "column_number": 5,
                "description": "when calling `__dpml_bid_addsub__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 187,
                "column_number": 1,
                "description": "parameter `y` of __dpml_bid_addsub__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 207,
                "column_number": 22,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 106,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "dpml_ux_bid.c|bid_f128_add|PULSE_UNINITIALIZED_VALUE",
        "node_key": "cf0297b55f41cdc5e428d3c95e4a2814",
        "hash": "ca74525713a255fe053a6f8e92590fb2",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`y.sign` is read without initialization during the call to `__dpml_bid_addsub__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 189,
        "column": 5,
        "procedure": "bid_f128_sub",
        "procedure_start_line": 170,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 170,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 222,
                "column_number": -1,
                "description": "struct field address `sign` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 189,
                "column_number": 5,
                "description": "when calling `__dpml_bid_addsub__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 187,
                "column_number": 1,
                "description": "parameter `y` of __dpml_bid_addsub__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 207,
                "column_number": 22,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 106,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "dpml_ux_bid.c|bid_f128_sub|PULSE_UNINITIALIZED_VALUE",
        "node_key": "cf0297b55f41cdc5e428d3c95e4a2814",
        "hash": "0f42f1cd48f8b0960b5ec6f98fd324cc",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`unpacked_y.exponent` is read without initialization during the call to `__dpml_bid_ux_cmp__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 396,
        "column": 14,
        "procedure": "bid_f128_cmp",
        "procedure_start_line": 374,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 374,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 268,
                "column_number": -1,
                "description": "struct field address `exponent` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 396,
                "column_number": 14,
                "description": "when calling `__dpml_bid_ux_cmp__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 334,
                "column_number": 1,
                "description": "parameter `unpacked_y` of __dpml_bid_ux_cmp__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 350,
                "column_number": 34,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 107,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "dpml_ux_bid.c|bid_f128_cmp|PULSE_UNINITIALIZED_VALUE",
        "node_key": "f8da84ff61ed6f7097abca6732e3fbdd",
        "hash": "f34a613ff461b198d26de618009d4cf2",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`unpacked_y.exponent` is read without initialization during the call to `__dpml_bid_ux_cmp__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 427,
        "column": 14,
        "procedure": "bid_f128_nextafter",
        "procedure_start_line": 404,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 404,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 222,
                "column_number": -1,
                "description": "struct field address `exponent` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 427,
                "column_number": 14,
                "description": "when calling `__dpml_bid_ux_cmp__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 334,
                "column_number": 1,
                "description": "parameter `unpacked_y` of __dpml_bid_ux_cmp__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_bid.c",
                "line_number": 350,
                "column_number": 34,
                "description": "macro expanded here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 107,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 4,
        "bug_trace_max_depth": 1,
        "key": "dpml_ux_bid.c|bid_f128_nextafter|PULSE_UNINITIALIZED_VALUE",
        "node_key": "7d3449f323b72026defe426f770b7578",
        "hash": "48c4d37301df23dca27fceca2faf5be1",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`argument.exponent` is read without initialization during the call to `__dpml_bid_pack__()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 265,
        "column": 9,
        "procedure": "__dpml_bid_C_rnd_to_int__",
        "procedure_start_line": 224,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_int.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_int.c",
                "line_number": 224,
                "column_number": 1,
                "description": "struct field address `exponent` created"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_int.c",
                "line_number": 265,
                "column_number": 9,
                "description": "when calling `__dpml_bid_pack__` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 746,
                "column_number": 1,
                "description": "parameter `unpacked_result` of __dpml_bid_pack__"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 767,
                "column_number": 5,
                "description": "when calling `__dpml_bid_ffs_and_shift__` here"
            },
            {
                "level": 2,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 74,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 2,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/architecture.h",
                "line_number": 709,
                "column_number": -1,
                "description": "parameter `argument` of __dpml_bid_ffs_and_shift__"
            },
            {
                "level": 2,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_ops.c",
                "line_number": 87,
                "column_number": 20,
                "description": "macro expanded here"
            },
            {
                "level": 2,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 107,
                "column_number": -1,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 6,
        "bug_trace_max_depth": 2,
        "key": "dpml_ux_int.c|__dpml_bid_C_rnd_to_int__|PULSE_UNINITIALIZED_VALUE",
        "node_key": "b34edf6d20d9793b78a2d881e78776ff",
        "hash": "a6b09d48d91d07d44f4fc95e44efb4b5",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`underflow_error` is read without initialization.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 314,
        "column": 9,
        "procedure": "bid_f128_atanh",
        "procedure_start_line": 240,
        "file": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_inv_hyper.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_inv_hyper.c",
                "line_number": 240,
                "column_number": 1,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux.h",
                "line_number": 222,
                "column_number": -1,
                "description": "variable `underflow_error` declared here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/float128/dpml_ux_inv_hyper.c",
                "line_number": 314,
                "column_number": 9,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 2,
        "bug_trace_max_depth": 0,
        "key": "dpml_ux_inv_hyper.c|bid_f128_atanh|PULSE_UNINITIALIZED_VALUE",
        "node_key": "d6dd64a5038abccd4d5578811eb7293c",
        "hash": "359c38ed511c26fb9f7da23dc9364e9d",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`fpsf` is read without initialization during the call to `__bid128_from_string()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1250,
        "column": 7,
        "procedure": "__bid128_nan",
        "procedure_start_line": 1231,
        "file": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_noncomp.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_noncomp.c",
                "line_number": 1231,
                "column_number": 1,
                "description": "variable `fpsf` declared here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_noncomp.c",
                "line_number": 1240,
                "column_number": 3,
                "description": "assigned"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_noncomp.c",
                "line_number": 1250,
                "column_number": 7,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_conf.h",
                "line_number": 532,
                "column_number": -1,
                "description": "when calling `__bid128_from_string` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_string.c",
                "line_number": 286,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid128_from_string"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid128_string.c",
                "line_number": 306,
                "column_number": 15,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 5,
        "bug_trace_max_depth": 1,
        "key": "bid128_noncomp.c|__bid128_nan|PULSE_UNINITIALIZED_VALUE",
        "node_key": "56c0d44f1242e733b5aa4373a8c00f39",
        "hash": "c7ebc54047927de58d7dadb0b0e46912",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`fpsf` is read without initialization during the call to `__bid32_from_string()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 984,
        "column": 7,
        "procedure": "__bid32_nan",
        "procedure_start_line": 965,
        "file": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_noncomp.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_noncomp.c",
                "line_number": 965,
                "column_number": 1,
                "description": "variable `fpsf` declared here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_noncomp.c",
                "line_number": 975,
                "column_number": 3,
                "description": "assigned"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_noncomp.c",
                "line_number": 984,
                "column_number": 7,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_conf.h",
                "line_number": 188,
                "column_number": -1,
                "description": "when calling `__bid32_from_string` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_string.c",
                "line_number": 166,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid32_from_string"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid32_string.c",
                "line_number": 185,
                "column_number": 15,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 5,
        "bug_trace_max_depth": 1,
        "key": "bid32_noncomp.c|__bid32_nan|PULSE_UNINITIALIZED_VALUE",
        "node_key": "56c0d44f1242e733b5aa4373a8c00f39",
        "hash": "cdd26eb5ef5d3b6131a93bd80d77f099",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "PULSE_UNINITIALIZED_VALUE",
        "qualifier": "`fpsf` is read without initialization during the call to `__bid64_from_string()`.",
        "severity": "ERROR",
        "category": "Memory error",
        "line": 1013,
        "column": 7,
        "procedure": "__bid64_nan",
        "procedure_start_line": 995,
        "file": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_noncomp.c",
        "bug_trace": [
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_noncomp.c",
                "line_number": 995,
                "column_number": 1,
                "description": "variable `fpsf` declared here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_noncomp.c",
                "line_number": 1004,
                "column_number": 3,
                "description": "assigned"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_noncomp.c",
                "line_number": 1013,
                "column_number": 7,
                "description": "macro expanded here"
            },
            {
                "level": 0,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid_conf.h",
                "line_number": 379,
                "column_number": -1,
                "description": "when calling `__bid64_from_string` here"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_string.c",
                "line_number": 252,
                "column_number": 1,
                "description": "parameter `pfpsf` of __bid64_from_string"
            },
            {
                "level": 1,
                "filename": "thirdparty/inteldfp/LIBRARY/src/inteldfp/bid64_string.c",
                "line_number": 271,
                "column_number": 15,
                "description": "read to uninitialized value occurs here"
            }
        ],
        "bug_trace_length": 5,
        "bug_trace_max_depth": 1,
        "key": "bid64_noncomp.c|__bid64_nan|PULSE_UNINITIALIZED_VALUE",
        "node_key": "56c0d44f1242e733b5aa4373a8c00f39",
        "hash": "28eaa6b1f19a2e311b63eb6109c1d0bb",
        "bug_type_hum": "Uninitialized Value",
        "extras": {}
    },
    {
        "bug_type": "NULLPTR_DEREFERENCE",
        "qualifier": "`result` could be null (null value originating from line 506) and is dereferenced in the call to `ryu_d2s_buffered()`.",
        "severity": "ERROR",
        "category": "Null pointer dereference",
        "line": 507,
        "column": 3,
        "procedure": "ryu_d2s",
        "procedure_start_line": 505,
        "file": "thirdparty/ryu/d2s.c",
        "bug_trace": [
            {
                "level": 1,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 506,
                "column_number": 32,
                "description": "in call to `malloc (null case)` (modelled)"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 506,
                "column_number": 32,
                "description": "is assigned to the null pointer"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 506,
                "column_number": 3,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 507,
                "column_number": 3,
                "description": "when calling `ryu_d2s_buffered` here"
            },
            {
                "level": 2,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 498,
                "column_number": 1,
                "description": "parameter `result` of ryu_d2s_buffered"
            },
            {
                "level": 2,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 499,
                "column_number": 21,
                "description": "when calling `ryu_d2s_buffered_n` here"
            },
            {
                "level": 3,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 454,
                "column_number": 1,
                "description": "parameter `result` of ryu_d2s_buffered_n"
            },
            {
                "level": 3,
                "filename": "thirdparty/ryu/d2s.c",
                "line_number": 472,
                "column_number": 12,
                "description": "when calling `copy_special_str` here"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 86,
                "column_number": 1,
                "description": "parameter `result` of copy_special_str"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 86,
                "column_number": 1,
                "description": "parameter `sign` of copy_special_str"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 98,
                "column_number": 3,
                "description": "invalid access occurs here"
            }
        ],
        "bug_trace_length": 11,
        "bug_trace_max_depth": 4,
        "key": "d2s.c|ryu_d2s|NULLPTR_DEREFERENCE",
        "node_key": "9ccc40f0e4f10f6dd5f9f803ec43bfd1",
        "hash": "068636c8dbabff38f8421af0bd08d13e",
        "bug_type_hum": "Null Dereference",
        "extras": {}
    },
    {
        "bug_type": "NULLPTR_DEREFERENCE",
        "qualifier": "`result` could be null (null value originating from line 342) and is dereferenced in the call to `ryu_f2s_buffered()`.",
        "severity": "ERROR",
        "category": "Null pointer dereference",
        "line": 343,
        "column": 3,
        "procedure": "ryu_f2s",
        "procedure_start_line": 341,
        "file": "thirdparty/ryu/f2s.c",
        "bug_trace": [
            {
                "level": 1,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 342,
                "column_number": 32,
                "description": "in call to `malloc (null case)` (modelled)"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 342,
                "column_number": 32,
                "description": "is assigned to the null pointer"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 342,
                "column_number": 3,
                "description": "assigned"
            },
            {
                "level": 1,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 343,
                "column_number": 3,
                "description": "when calling `ryu_f2s_buffered` here"
            },
            {
                "level": 2,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 334,
                "column_number": 1,
                "description": "parameter `result` of ryu_f2s_buffered"
            },
            {
                "level": 2,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 335,
                "column_number": 21,
                "description": "when calling `ryu_f2s_buffered_n` here"
            },
            {
                "level": 3,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 308,
                "column_number": 1,
                "description": "parameter `result` of ryu_f2s_buffered_n"
            },
            {
                "level": 3,
                "filename": "thirdparty/ryu/f2s.c",
                "line_number": 327,
                "column_number": 12,
                "description": "when calling `copy_special_str` here"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 86,
                "column_number": 1,
                "description": "parameter `result` of copy_special_str"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 86,
                "column_number": 1,
                "description": "parameter `sign` of copy_special_str"
            },
            {
                "level": 4,
                "filename": "thirdparty/ryu/common.h",
                "line_number": 98,
                "column_number": 3,
                "description": "invalid access occurs here"
            }
        ],
        "bug_trace_length": 11,
        "bug_trace_max_depth": 4,
        "key": "f2s.c|ryu_f2s|NULLPTR_DEREFERENCE",
        "node_key": "9ccc40f0e4f10f6dd5f9f803ec43bfd1",
        "hash": "7379331f436b30d1c59fa32c5f6baa24",
        "bug_type_hum": "Null Dereference",
        "extras": {}
    }
]
